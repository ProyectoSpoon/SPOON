// src/app/api/orders/route.ts - Versi√≥n de Debug
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    console.log("üîç POST /api/orders - Iniciando...");
    
    const body = await request.json();
    console.log("üìù Body recibido:", JSON.stringify(body, null, 2));
    
    const {
      table_number,
      order_type = 'dine_in',
      items,
      notes,
      payment_method
    } = body;

    console.log("üìä Datos extra√≠dos:", {
      table_number,
      order_type,
      items: items?.length || 0,
      notes,
      payment_method
    });

    // Validaciones b√°sicas
    if (!table_number) {
      console.log("‚ùå Error: table_number requerido");
      return NextResponse.json(
        { error: 'table_number es requerido' },
        { status: 400 }
      );
    }

    if (!items || !Array.isArray(items) || items.length === 0) {
      console.log("‚ùå Error: items requerido");
      return NextResponse.json(
        { error: 'items es requerido y debe ser un array no vac√≠o' },
        { status: 400 }
      );
    }

    // Probar conexi√≥n a base de datos
    console.log("üîå Probando importar query...");
    
    try {
      const { query } = await import('@/config/database');
      console.log("‚úÖ Query importado exitosamente");
      
      // Probar una consulta simple
      console.log("üß™ Probando consulta simple...");
      const testResult = await query('SELECT NOW() as current_time');
      console.log("‚úÖ Consulta exitosa:", testResult.rows[0]);
      
    } catch (dbError: any) {
      console.error("‚ùå Error de base de datos:", dbError);
      return NextResponse.json(
        { error: 'Error de conexi√≥n a base de datos', details: dbError?.message || 'Error desconocido' },
        { status: 500 }
      );
    }

    // Si llegamos aqu√≠, la conexi√≥n funciona
    console.log("üéØ Todo OK hasta aqu√≠, creando orden mock...");
    
    // Orden mock para pruebas
    const mockOrder = {
      id: `mock-${Date.now()}`,
      table_number,
      order_type,
      items,
      notes,
      payment_method,
      status: 'pending',
      created_at: new Date().toISOString(),
      total: items.reduce((sum, item) => sum + (item.unit_price * item.quantity), 0)
    };

    console.log("‚úÖ Orden mock creada:", mockOrder);
    
    return NextResponse.json(mockOrder, { status: 201 });
    
  } catch (error: any) {
    console.error('‚ùå Error general en POST /api/orders:', error);
    console.error('Stack trace:', error?.stack);
    
    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        message: error?.message || 'Error desconocido',
        stack: process.env.NODE_ENV === 'development' ? error?.stack : undefined
      },
      { status: 500 }
    );
  }
}

// Mantener el GET original
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');

    console.log("üîç GET /api/orders - status:", status);

    // Por ahora retornar array vac√≠o para testing
    return NextResponse.json([]);
    
  } catch (error: any) {
    console.error('Error al obtener √≥rdenes:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}