'use client';

import { useNotifications } from '@/shared/Context/notification-context';

import React, { useState, useEffect } from 'react';
// ‚úÖ IMPORTS CORREGIDOS - Usando ruta real del proyecto
import { Button } from '@/shared/components/ui/Button';
import { Card } from '@/shared/components/ui/Card';
import { Badge } from '@/shared/components/ui/Badge';
import { Input } from '@/shared/components/ui/Input';
import { Textarea } from '@/shared/components/ui/Textarea';
import { 
  ShoppingCart, 
  Plus, 
  Minus, 
  Trash2, 
  DollarSign,
  Users,
  Clock,
  CheckCircle
} from 'lucide-react';
// ‚úÖ IMPORT LOCAL - utils.ts est√° en el mismo directorio
import { 
  calcularTotal, 
  calcularSubtotal, 
  formatearPrecio, 
  validarCarrito,
  agregarAlCarrito,
  actualizarCantidadCarrito,
  removerDelCarrito,
  CarritoItem
} from './utils';
import SelectorMesa from './components/SelectorMesa';

// üè¢ COMPONENTE PRINCIPAL - TOTALMENTE CORREGIDO
const RegistroVentasPage = () => {
  // üì± ESTADOS DEL COMPONENTE
  const [carrito, setCarrito] = useState<CarritoItem[]>([]);
  const [mesaSeleccionada, setMesaSeleccionada] = useState<string | null>(null);
  const [productos, setProductos] = useState<any[]>([]);
  const [cargandoProductos, setCargandoProductos] = useState(true);
  const [creandoOrden, setCreandoOrden] = useState(false);
  const [metodoPago, setMetodoPago] = useState<'cash' | 'card' | 'transfer'>('cash');
  const [notasOrden, setNotasOrden] = useState('');

  // üîÑ CARGAR PRODUCTOS AL MONTAR COMPONENTE
  useEffect(() => {
    cargarProductos();
  }, []);

  // üì¶ FUNCI√ìN CARGAR PRODUCTOS
  const cargarProductos = async () => {
    try {
      setCargandoProductos(true);
      const response = await fetch('/api/products');
      if (response.ok) {
        const data = await response.json();
        setProductos(data);
      } else {
        // Si no hay API de productos, usar datos de ejemplo
        setProductos([
          { id: '1', nombre: 'Hamburguesa Cl√°sica', precio: 15000 },
          { id: '2', nombre: 'Pizza Margherita', precio: 18000 },
          { id: '3', nombre: 'Pasta Carbonara', precio: 16000 },
          { id: '4', nombre: 'Ensalada C√©sar', precio: 12000 },
          { id: '5', nombre: 'Papas Fritas', precio: 8000 },
          { id: '6', nombre: 'Coca Cola', precio: 3000 }
        ]);
      }
    } catch (error) {
      console.error('Error al cargar productos:', error);
      // Datos de ejemplo si falla la API
      setProductos([
        { id: '1', nombre: 'Hamburguesa Cl√°sica', precio: 15000 },
        { id: '2', nombre: 'Pizza Margherita', precio: 18000 },
        { id: '3', nombre: 'Pasta Carbonara', precio: 16000 },
        { id: '4', nombre: 'Ensalada C√©sar', precio: 12000 },
        { id: '5', nombre: 'Papas Fritas', precio: 8000 },
        { id: '6', nombre: 'Coca Cola', precio: 3000 }
      ]);
    } finally {
      setCargandoProductos(false);
    }
  };

  // ‚ûï MANEJAR AGREGAR PRODUCTO AL CARRITO
  const handleAgregarProducto = (producto: any) => {
    setCarrito(carritoActual => agregarAlCarrito(carritoActual, producto));
  };

  // üîÑ MANEJAR ACTUALIZAR CANTIDAD
  const handleActualizarCantidad = (productId: string, nuevaCantidad: number) => {
    setCarrito(carritoActual => 
      actualizarCantidadCarrito(carritoActual, productId, nuevaCantidad)
    );
  };

  // üóëÔ∏è MANEJAR REMOVER PRODUCTO
  const handleRemoverProducto = (productId: string) => {
    setCarrito(carritoActual => removerDelCarrito(carritoActual, productId));
  };

  // üßπ LIMPIAR CARRITO
  const limpiarCarrito = () => {
    setCarrito([]);
    setNotasOrden('');
  };

  // üìù MANEJAR CREAR ORDEN
  const handleCrearOrden = async () => {
    // ‚úÖ VALIDACIONES USANDO FUNCIONES CORREGIDAS
    const validacion = validarCarrito(carrito);
    if (!validacion.esValido) {
      alert(validacion.mensaje);
      return;
    }
    
    if (!mesaSeleccionada) {
      alert("Selecciona una mesa");
      return;
    }
    
    try {
      setCreandoOrden(true);
      
      const ordenData = {
        table_number: mesaSeleccionada,
        order_type: 'dine_in',
        payment_method: metodoPago,
        notes: notasOrden,
        items: carrito.map(item => ({
          product_id: item.id,
          quantity: item.cantidad,
          unit_price: item.precio,
          notes: item.notas || ''
        }))
      };
      
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(ordenData)
      });
      
      if (response.ok) {
        const orden = await response.json();
        
        // Limpiar estado
        limpiarCarrito();
        setMesaSeleccionada(null);
        setMetodoPago('cash');
        
        alert(`Orden #${orden.id} creada exitosamente para Mesa ${mesaSeleccionada}`);
      } else {
        const error = await response.json();
        alert(`Error al crear orden: ${error.message}`);
      }
    } catch (error) {
      console.error('Error al crear orden:', error);
      alert('Error al crear la orden. Intenta nuevamente.');
    } finally {
      setCreandoOrden(false);
    }
  };

  // üìä CALCULAR ESTAD√çSTICAS - USANDO FUNCI√ìN CORREGIDA
  const total = calcularTotal(carrito); // ‚úÖ L√çNEA 205 CORREGIDA
  const totalItems = carrito.reduce((sum, item) => sum + item.cantidad, 0);

  // üé® RENDER DEL COMPONENTE
  return (
    <div className="container mx-auto p-4 space-y-6">
      {/* üè∑Ô∏è ENCABEZADO */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-800">Registro de Ventas</h1>
        <Badge variant="default" size="lg" className="text-lg px-4 py-2">
          Total: {formatearPrecio(total)}
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* üçΩÔ∏è SELECTOR DE MESA */}
        <Card className="lg:col-span-3 p-6">
          <div className="mb-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <Users className="h-5 w-5" />
              Seleccionar Mesa
            </h2>
          </div>
          <SelectorMesa 
            mesaSeleccionada={mesaSeleccionada}
            onSeleccionarMesa={setMesaSeleccionada}
          />
        </Card>

        {/* üì¶ PRODUCTOS DISPONIBLES */}
        <Card className="lg:col-span-2 p-6">
          <h2 className="text-xl font-semibold mb-4">Productos Disponibles</h2>
          {cargandoProductos ? (
            <div className="text-center py-8">
              <Clock className="h-8 w-8 animate-spin mx-auto mb-2" />
              <p>Cargando productos...</p>
            </div>
          ) : (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {productos.map((producto) => (
                <Card key={producto.id} className="hover:shadow-md transition-shadow p-4">
                  <h3 className="font-semibold text-sm mb-2">{producto.nombre}</h3>
                  <p className="text-green-600 font-bold mb-3">
                    {formatearPrecio(producto.precio)}
                  </p>
                  <Button 
                    onClick={() => handleAgregarProducto(producto)}
                    size="sm" 
                    variant="default"
                    className="w-full"
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Agregar
                  </Button>
                </Card>
              ))}
            </div>
          )}
        </Card>

        {/* üõí CARRITO DE COMPRAS */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold flex items-center gap-2 mb-4">
            <ShoppingCart className="h-5 w-5" />
            Carrito ({totalItems} items)
          </h2>
          
          {carrito.length === 0 ? (
            <p className="text-center text-gray-500 py-8">
              Carrito vac√≠o
            </p>
          ) : (
            <div className="space-y-4">
              {/* Items del carrito */}
              <div className="space-y-3 max-h-60 overflow-y-auto">
                {carrito.map((item) => (
                  <div key={item.id} className="flex items-center justify-between border-b pb-2">
                    <div className="flex-1">
                      <h4 className="font-medium text-sm">{item.nombre}</h4>
                      <p className="text-green-600 text-sm">
                        {formatearPrecio(item.precio)} c/u
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleActualizarCantidad(item.id, item.cantidad - 1)}
                      >
                        <Minus className="h-3 w-3" />
                      </Button>
                      <span className="w-8 text-center text-sm">{item.cantidad}</span>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleActualizarCantidad(item.id, item.cantidad + 1)}
                      >
                        <Plus className="h-3 w-3" />
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleRemoverProducto(item.id)}
                      >
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>

              {/* M√©todo de pago */}
              <div className="space-y-2">
                <label className="text-sm font-medium">M√©todo de Pago:</label>
                <select 
                  value={metodoPago}
                  onChange={(e) => setMetodoPago(e.target.value as any)}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="cash">Efectivo</option>
                  <option value="card">Tarjeta</option>
                  <option value="transfer">Transferencia</option>
                </select>
              </div>

              {/* Notas */}
              <div className="space-y-2">
                <label className="text-sm font-medium">Notas de la orden:</label>
                <textarea
                  value={notasOrden}
                  onChange={(e) => setNotasOrden(e.target.value)}
                  placeholder="Instrucciones especiales..."
                  rows={2}
                  className="w-full p-2 border rounded-md resize-none"
                />
              </div>

              {/* Total y botones */}
              <div className="border-t pt-4 space-y-3">
                <div className="flex justify-between items-center font-bold text-lg">
                  <span>Total:</span>
                  <span className="text-green-600">{formatearPrecio(total)}</span>
                </div>
                
                <div className="space-y-2">
                  <Button 
                    onClick={handleCrearOrden}
                    disabled={!mesaSeleccionada || carrito.length === 0 || creandoOrden}
                    variant="default"
                    className="w-full"
                  >
                    {creandoOrden ? (
                      <>
                        <Clock className="h-4 w-4 mr-2 animate-spin" />
                        Creando...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Crear Orden
                      </>
                    )}
                  </Button>
                  
                  <Button 
                    onClick={limpiarCarrito}
                    variant="outline"
                    className="w-full"
                    disabled={carrito.length === 0}
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    Limpiar Carrito
                  </Button>
                </div>
              </div>
            </div>
          )}
        </Card>
      </div>
    </div>
  );
};

export default RegistroVentasPage;
