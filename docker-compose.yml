# ===== REDES SEGMENTADAS =====
networks:
  frontend:
    driver: bridge
    name: spoon_frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    name: spoon_backend
    ipam:
      config:
        - subnet: 172.21.0.0/24
  monitoring:
    driver: bridge
    name: spoon_monitoring
    ipam:
      config:
        - subnet: 172.22.0.0/24

# ===== SECRETS MANAGEMENT =====
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

# ===== SERVICIOS =====
services:
  # API Gateway con Nginx
  nginx:
    image: nginx:1.21-alpine
    container_name: spoon_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/error:/usr/share/nginx/html:ro
    networks:
      - frontend
      - backend
    depends_on:
      nextjs:
        condition: service_healthy
      menu-service:
        condition: service_started
      ventas-service:
        condition: service_started
      bi-service:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Aplicación Next.js principal
  nextjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spoon_nextjs
    ports:
      - "${NEXTJS_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_HOST=${DB_HOST:-postgres}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT:-5432}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - db_password
      - jwt_secret
    volumes:
      - ./public:/app/public:ro
      - nextjs_node_modules:/app/node_modules
    networks:
      - frontend
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Servicio de menú
  menu-service:
    build:
      context: ./menu-service
      dockerfile: Dockerfile.menu
    container_name: spoon_menu_service
    expose:
      - "3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_HOST=${DB_HOST:-postgres}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT:-5432}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    secrets:
      - db_password
    volumes:
      - ./menu-service/src:/app/src:ro
      - ./menu-service/package.json:/app/package.json:ro
      - menu_service_node_modules:/app/node_modules
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Servicio de ventas
  ventas-service:
    build:
      context: ./ventas-service
      dockerfile: Dockerfile.ventas
    container_name: spoon_ventas_service
    expose:
      - "3003"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3003
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_HOST=${DB_HOST:-postgres}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT:-5432}
    secrets:
      - db_password
    volumes:
      - ./ventas-service/src:/app/src:ro
      - ./ventas-service/package.json:/app/package.json:ro
      - ventas_service_node_modules:/app/node_modules
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Servicio BI
  bi-service:
    build:
      context: ./bi-service
      dockerfile: Dockerfile.bi
    container_name: spoon_bi_service
    expose:
      - "3005"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3005
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_HOST=${DB_HOST:-postgres}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT:-5432}
    secrets:
      - db_password
    volumes:
      - ./bi-service/src:/app/src:ro
      - ./bi-service/package.json:/app/package.json:ro
      - bi_service_node_modules:/app/node_modules
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: spoon_postgres
    ports:
       - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # pgAdmin4 - Administración de PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: spoon_pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@spoon.local}
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/db_password
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    secrets:
      - db_password
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Servicio de caché con Redis
  redis:
    image: redis:6-alpine
    container_name: spoon_redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Prometheus - Monitoreo de métricas
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: spoon_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules:/etc/prometheus/alert.rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Grafana - Visualización de métricas
  grafana:
    image: grafana/grafana:9.5.2
    container_name: spoon_grafana
    ports:
      - "${GRAFANA_PORT:-3100}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    secrets:
      - grafana_admin_password
    networks:
      - monitoring
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # Node Exporter - Métricas del sistema
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: spoon_node_exporter
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # PostgreSQL Exporter - Métricas de PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: spoon_postgres_exporter
    expose:
      - "9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:$(cat /run/secrets/db_password)@postgres:5432/${DB_NAME}?sslmode=disable
    secrets:
      - db_password
    networks:
      - monitoring
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis Exporter - Métricas de Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.45.0
    container_name: spoon_redis_exporter
    expose:
      - "9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
      - backend
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # cAdvisor - Métricas de contenedores
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    container_name: spoon_cadvisor
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

# ===== VOLÚMENES =====
volumes:
  postgres_data:
    name: spoon_postgres_data
  redis_data:
    name: spoon_redis_data
  prometheus_data:
    name: spoon_prometheus_data
  grafana_data:
    name: spoon_grafana_data
  pgadmin_data:
    name: spoon_pgadmin_data
  nextjs_node_modules:
    name: spoon_nextjs_node_modules
  menu_service_node_modules:
    name: spoon_menu_service_node_modules
  ventas_service_node_modules:
    name: spoon_ventas_service_node_modules
  bi_service_node_modules:
    name: spoon_bi_service_node_modules
